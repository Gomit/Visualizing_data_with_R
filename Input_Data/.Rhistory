ggplot(mtcars2) +
geom_jitter(aes_string(colnames(data)[1],c(colnames(data)[2],colnames(data)[3],colnames(data)[4]), colour=colnames(data)[1])) + geom_smooth(aes(colnames(data)[1],value, colour=variable), method=lm, se=FALSE)
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes_string(colnames(data)[1],colnames(data)[2], colour=colnames(data)[1])) + geom_smooth(aes(colnames(data)[1],value, colour=variable), method=lm, se=FALSE)
colnames(data)[2]
colnames(data)[2]
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes_string(colnames(data)[1],colnames(data)[2], colour=value)) + geom_smooth(aes(colnames(data)[1],value, colour=variable), method=lm, se=FALSE)
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes_string(colnames(data)[1],colnames(data)[2], colour=colnames(data)[1]))
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes_string(colnames(data)[1],colnames(data)[2], colour=colnames(data)[2]))
require(reshape2)
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes(variable,value, colour=variable)) + geom_smooth(aes(variable,value, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x",ncol = 2) +
labs(x = "x-Axis", y = "y-Axis")
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
scale_color_discrete(name ="Engine",
labels=c("V-engine", "Straight engine","hello"))
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
#labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
scale_color_discrete(name ="Engine",
labels=c("V-engine", "Straight engine","hello"))
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
#labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
theme(legend.position=c(1,1),legend.justification=c(1,1))
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
#labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
theme(legend.position=c(1,1,1),legend.justification=c(1,1,1))
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1,1),legend.justification=c(1,1,1))
#labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))
#labs(x = "X-Axis", y = "Y-Axis")+ #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes(color=factor(vs)))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes(color=factor(value)))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes(color=factor(variable)))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes(color=factor(colnames(data)[2])))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes(color=factor(colnames(data)[2])))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_point(aes_string(color=factor(colnames(data)[2])))+ geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1) + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color=variable) + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE) + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE) + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE) + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1) + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1) + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1) + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
require(reshape2)
mtcars2 = melt(data, id.vars=1)
ggplot(mtcars2) +
geom_jitter(aes(variable,value, colour=variable)) + geom_smooth(aes(variable,value, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x",ncol = 2) +
labs(x = "x-Axis", y = "y-Axis")
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
theme(legend.position=c(1,1),legend.justification=c(1,1))+
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
# Enkel regressionslinje
ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
#Regressionline
ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
p1 <- ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")           #set one color for all points
p2 <- ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green")       #set color scale by a continuous variable
p3 <- geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red")  #set color scale by a factor variable
grid.arrange(p1, p2, p3, nrow=1)
library(gridExtra)
grid.arrange(p1, p2, p3, nrow=1)
print(colnames(data)[4])
p1 <- ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue")           #set one color for all points
p2 <- ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green")       #set color scale by a continuous variable
p3 <- ggplot(data) + geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red")  #set color scale by a factor variable
library(gridExtra)
grid.arrange(p1, p2, p3, nrow=1)
grid.arrange(p1, p2, p3, ncol=2)
#Regressionline
test =ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
labs(x = "X-Axis", y = "Y-Axis") #Axis Labels
grid.arrange(p1, p2, p3,test, ncol=2)
#Regressionline
test =ggplot(data) + #Insert data
geom_jitter(aes_string(colnames(data)[1], colnames(data)[2]), shape=1, colour="blue") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[2]), method=lm, se=FALSE,color="blue") + #col2-3 Reg.Line
geom_jitter(aes_string(colnames(data)[1], colnames(data)[3]), shape=1, colour="green") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[3]), method=lm, se=FALSE,color="green") + #col2-4 Reg.Lin
geom_jitter(aes_string(colnames(data)[1], colnames(data)[4]), shape=1, colour="red") + geom_smooth(aes_string(colnames(data)[1], colnames(data)[4]), method=lm, se=FALSE,color="red") + #col2-5 Reg.Lin
labs(x = "col.1", y = "Col.2-Col.n") #Axis Labels
grid.arrange(p1, p2, p3,test, ncol=2)
# Check Working Directory
getwd()
# Set Working Directory
setwd('/Users/merongoitom/Desktop/Nanodegree/Lucid_project/R_projects/Input_Data')
# Import CSV File
data = read.csv("file.csv")
ggsave(Hello, file="ratings.png")
grid.arrange(p1, p2, p3,test, ncol=2)
alla = grid.arrange(p1, p2, p3,test, ncol=2)
ggsave(alla, file="test.png")
print(data)
data$X <- NULL #Använd denna func. om jag vill ta bort en column
print(data)
print(data)
# Check Working Directory
getwd()
# Set Working Directory
setwd('/Users/merongoitom/Desktop/Nanodegree/Lucid_project/R_projects/Input_Data')
# Import CSV File
data = read.csv("file.csv")
print(data)
data$X <- NULL #Använd denna func. om jag vill ta bort en column
# Check Working Directory
getwd()
# Set Working Directory
setwd('/Users/merongoitom/Desktop/Nanodegree/Lucid_project/R_projects/Input_Data')
# Import CSV File
data = read.csv("file.csv")
print(data)
write.csv(data[,2:5],file = "file0.csv")
write.csv(data[,2:5],file = "file0.csv")
# Check Working Directory
getwd()
# Set Working Directory
setwd('/Users/merongoitom/Desktop/Nanodegree/Lucid_project/R_projects/Input_Data')
# Import CSV File
data = read.csv("file.csv")
# Check Working Directory
getwd()
# Set Working Directory
setwd('/Users/merongoitom/Desktop/Nanodegree/Lucid_project/R_projects/Input_Data')
# Import CSV File
data = read.csv("file0.csv")
print(data)
print(data[,2:5])
write.csv(data[,2:5],file = "file0.csv")
write.csv(data[,2:5],file = "file1.csv")
write.csv(data[,3:5],file = "file1.csv")
View(res_cont)
View(plant)
# Enkel regressionslinje
ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
# Enkel regressionslinje
ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
# Enkel regressionslinje
ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
# Enkel regressionslinje
lm_eqn <- function(data){
m <- lm(y ~ x, data);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p1 <- p + geom_text(x = 25, y = 300, label = lm_eqn(data), parse = TRUE)
# Enkel regressionslinje
p=ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
# Enkel regressionslinje
lm_eqn <- function(data){
m <- lm(y ~ x, data);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p1 <- p + geom_text(x = 25, y = 300, label = lm_eqn(data), parse = TRUE)
# Enkel regressionslinje
p=ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
x=colnames(data)[2]
y=colnames(data)[3])
# Enkel regressionslinje
p=ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
x=colnames(data)[2]
y=colnames(data)[3]
# Enkel regressionslinje
lm_eqn <- function(data){
m <- lm(y ~ x, data);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p1 <- p + geom_text(x = 25, y = 300, label = lm_eqn(data), parse = TRUE)
df <- data.frame(x = c(1:100))
df$y <- 2 + 3 * df$x + rnorm(100, sd = 40)
p <- ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
geom_point()
p
lm_eqn <- function(data) {
m <- lm(y ~ x, data);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p1 <- p + geom_text(x = 25, y = 300, label = lm_eqn(data), parse = TRUE)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
# Enkel regressionslinje
library(ggplot2)
df <- data.frame(x = c(1:100))
df$y <- 2 + 3 * df$x + rnorm(100, sd = 40)
p <- ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
geom_point()
p
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
p=ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
x=colnames(data)[2]
y=colnames(data)[3]
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
#print(p1)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(df)
df$x=colnames(data)[2]
df$y=colnames(data)[3]
print(df)
print(data[2])
df$x=data[2]
df$y=data[3]
print(df)
df1$x=data[2]
df <- data.frame(x = c(1:10))
print(df)
df1$x=data[2]
df$x=data[2]
df$y=data[3]
print(df)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
p1 = p + geom_text(aes(x = 10, y = 10, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 10, y = 10, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
p1 = p + geom_text(aes(x = 10, y = 10, label = lm_eqn(lm(th_mean ~ th_sd, df))), parse = TRUE)
print(p1)
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(th_sd) == a + b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(th_sd) == a - b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 10, y = 10, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
p=ggplot(data, aes_string(colnames(data)[2], colnames(data)[3])) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Don't add shaded confidence region
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(th_sd) == a + b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(th_sd) == a - b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
}
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(th_sd) == a + b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(th_sd) == a - b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
lm_eqn = function(m) {
l <- list(a = format(coef(m)[1], digits = 2),
b = format(abs(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3));
if (coef(m)[2] >= 0)  {
eq <- substitute(italic(th_sd) == a + b %.% italic(th_mean)*","~~italic(r)^2~"="~r2,l)
} else {
eq <- substitute(italic(th_sd) == a - b %.% italic()*","~~italic(r)^2~"="~r2,l)
}
as.character(as.expression(eq));
}
p1 = p + geom_text(aes(x = 10, y = 10, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
print(p1)
print(df)
print(df)
print("hello")
print("hello")
